// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: msgtype.proto

#include <type/msgtype.pb.h>

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
constexpr Compound::Compound(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : mds_(){}
struct CompoundDefaultTypeInternal {
  constexpr CompoundDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~CompoundDefaultTypeInternal() {}
  union {
    Compound _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT CompoundDefaultTypeInternal _Compound_default_instance_;
constexpr MessageData::MessageData(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : head_(0)

  , _oneof_case_{}{}
struct MessageDataDefaultTypeInternal {
  constexpr MessageDataDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MessageDataDefaultTypeInternal() {}
  union {
    MessageData _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MessageDataDefaultTypeInternal _MessageData_default_instance_;
constexpr Ping::Ping(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sourceaddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sourcenode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seqno_(0u)
  , sourceport_(0u){}
struct PingDefaultTypeInternal {
  constexpr PingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PingDefaultTypeInternal() {}
  union {
    Ping _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PingDefaultTypeInternal _Ping_default_instance_;
constexpr IndirectPing::IndirectPing(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , targetaddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sourceaddr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , sourcenode_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , seqno_(0u)
  , targetport_(0u)
  , nack_(false)
  , sourceport_(0u){}
struct IndirectPingDefaultTypeInternal {
  constexpr IndirectPingDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~IndirectPingDefaultTypeInternal() {}
  union {
    IndirectPing _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT IndirectPingDefaultTypeInternal _IndirectPing_default_instance_;
constexpr AckResp::AckResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seqno_(0u){}
struct AckRespDefaultTypeInternal {
  constexpr AckRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AckRespDefaultTypeInternal() {}
  union {
    AckResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AckRespDefaultTypeInternal _AckResp_default_instance_;
constexpr NackResp::NackResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : seqno_(0u){}
struct NackRespDefaultTypeInternal {
  constexpr NackRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~NackRespDefaultTypeInternal() {}
  union {
    NackResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT NackRespDefaultTypeInternal _NackResp_default_instance_;
constexpr ErrResp::ErrResp(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : error_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct ErrRespDefaultTypeInternal {
  constexpr ErrRespDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ErrRespDefaultTypeInternal() {}
  union {
    ErrResp _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ErrRespDefaultTypeInternal _ErrResp_default_instance_;
constexpr Suspect::Suspect(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , incarnation_(0u){}
struct SuspectDefaultTypeInternal {
  constexpr SuspectDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SuspectDefaultTypeInternal() {}
  union {
    Suspect _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SuspectDefaultTypeInternal _Suspect_default_instance_;
constexpr Alive::Alive(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , incarnation_(0u)
  , port_(0u){}
struct AliveDefaultTypeInternal {
  constexpr AliveDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AliveDefaultTypeInternal() {}
  union {
    Alive _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AliveDefaultTypeInternal _Alive_default_instance_;
constexpr Dead::Dead(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : node_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , from_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , incarnation_(0u){}
struct DeadDefaultTypeInternal {
  constexpr DeadDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DeadDefaultTypeInternal() {}
  union {
    Dead _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DeadDefaultTypeInternal _Dead_default_instance_;
constexpr PushPull::PushPull(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : states_()
  , join_(false){}
struct PushPullDefaultTypeInternal {
  constexpr PushPullDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushPullDefaultTypeInternal() {}
  union {
    PushPull _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushPullDefaultTypeInternal _PushPull_default_instance_;
constexpr PushNodeState::PushNodeState(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : name_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , addr_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string)
  , port_(0u)
  , incarnation_(0u)
  , state_(0)
{}
struct PushNodeStateDefaultTypeInternal {
  constexpr PushNodeStateDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~PushNodeStateDefaultTypeInternal() {}
  union {
    PushNodeState _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT PushNodeStateDefaultTypeInternal _PushNodeState_default_instance_;
constexpr User::User(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : msg_(&::PROTOBUF_NAMESPACE_ID::internal::fixed_address_empty_string){}
struct UserDefaultTypeInternal {
  constexpr UserDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~UserDefaultTypeInternal() {}
  union {
    User _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT UserDefaultTypeInternal _User_default_instance_;
constexpr ComBroadcast::ComBroadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : bs_(){}
struct ComBroadcastDefaultTypeInternal {
  constexpr ComBroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ComBroadcastDefaultTypeInternal() {}
  union {
    ComBroadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ComBroadcastDefaultTypeInternal _ComBroadcast_default_instance_;
constexpr Broadcast::Broadcast(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : type_(0)

  , _oneof_case_{}{}
struct BroadcastDefaultTypeInternal {
  constexpr BroadcastDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~BroadcastDefaultTypeInternal() {}
  union {
    Broadcast _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT BroadcastDefaultTypeInternal _Broadcast_default_instance_;
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_msgtype_2eproto[15];
static const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* file_level_enum_descriptors_msgtype_2eproto[3];
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_msgtype_2eproto = nullptr;

const uint32_t TableStruct_msgtype_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Compound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Compound, mds_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::MessageData, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::MessageData, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::MessageData, head_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::MessageData, Body_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Ping, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Ping, seqno_),
  PROTOBUF_FIELD_OFFSET(::Ping, node_),
  PROTOBUF_FIELD_OFFSET(::Ping, sourceaddr_),
  PROTOBUF_FIELD_OFFSET(::Ping, sourceport_),
  PROTOBUF_FIELD_OFFSET(::Ping, sourcenode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::IndirectPing, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::IndirectPing, seqno_),
  PROTOBUF_FIELD_OFFSET(::IndirectPing, node_),
  PROTOBUF_FIELD_OFFSET(::IndirectPing, targetaddr_),
  PROTOBUF_FIELD_OFFSET(::IndirectPing, targetport_),
  PROTOBUF_FIELD_OFFSET(::IndirectPing, nack_),
  PROTOBUF_FIELD_OFFSET(::IndirectPing, sourceaddr_),
  PROTOBUF_FIELD_OFFSET(::IndirectPing, sourceport_),
  PROTOBUF_FIELD_OFFSET(::IndirectPing, sourcenode_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::AckResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::AckResp, seqno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::NackResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::NackResp, seqno_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ErrResp, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ErrResp, error_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Suspect, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Suspect, incarnation_),
  PROTOBUF_FIELD_OFFSET(::Suspect, node_),
  PROTOBUF_FIELD_OFFSET(::Suspect, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Alive, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Alive, incarnation_),
  PROTOBUF_FIELD_OFFSET(::Alive, node_),
  PROTOBUF_FIELD_OFFSET(::Alive, addr_),
  PROTOBUF_FIELD_OFFSET(::Alive, port_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Dead, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Dead, incarnation_),
  PROTOBUF_FIELD_OFFSET(::Dead, node_),
  PROTOBUF_FIELD_OFFSET(::Dead, from_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PushPull, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PushPull, join_),
  PROTOBUF_FIELD_OFFSET(::PushPull, states_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::PushNodeState, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::PushNodeState, name_),
  PROTOBUF_FIELD_OFFSET(::PushNodeState, addr_),
  PROTOBUF_FIELD_OFFSET(::PushNodeState, port_),
  PROTOBUF_FIELD_OFFSET(::PushNodeState, incarnation_),
  PROTOBUF_FIELD_OFFSET(::PushNodeState, state_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::User, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::User, msg_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::ComBroadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::ComBroadcast, bs_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::Broadcast, _internal_metadata_),
  ~0u,  // no _extensions_
  PROTOBUF_FIELD_OFFSET(::Broadcast, _oneof_case_[0]),
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::Broadcast, type_),
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  ::PROTOBUF_NAMESPACE_ID::internal::kInvalidFieldOffsetTag,
  PROTOBUF_FIELD_OFFSET(::Broadcast, Content_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::Compound)},
  { 7, -1, -1, sizeof(::MessageData)},
  { 23, -1, -1, sizeof(::Ping)},
  { 34, -1, -1, sizeof(::IndirectPing)},
  { 48, -1, -1, sizeof(::AckResp)},
  { 55, -1, -1, sizeof(::NackResp)},
  { 62, -1, -1, sizeof(::ErrResp)},
  { 69, -1, -1, sizeof(::Suspect)},
  { 78, -1, -1, sizeof(::Alive)},
  { 88, -1, -1, sizeof(::Dead)},
  { 97, -1, -1, sizeof(::PushPull)},
  { 105, -1, -1, sizeof(::PushNodeState)},
  { 116, -1, -1, sizeof(::User)},
  { 123, -1, -1, sizeof(::ComBroadcast)},
  { 130, -1, -1, sizeof(::Broadcast)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Compound_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_MessageData_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Ping_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_IndirectPing_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_AckResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_NackResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ErrResp_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Suspect_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Alive_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Dead_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PushPull_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_PushNodeState_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_User_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_ComBroadcast_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::_Broadcast_default_instance_),
};

const char descriptor_table_protodef_msgtype_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\rmsgtype.proto\"%\n\010Compound\022\031\n\003Mds\030\001 \003(\013"
  "2\014.MessageData\"\301\003\n\013MessageData\022&\n\004Head\030\001"
  " \001(\0162\030.MessageData.MessageType\022\025\n\004ping\030\002"
  " \001(\0132\005.PingH\000\022%\n\014indirectping\030\003 \001(\0132\r.In"
  "directPingH\000\022\033\n\007ackresp\030\004 \001(\0132\010.AckRespH"
  "\000\022\035\n\010nackresp\030\005 \001(\0132\t.NackRespH\000\022\035\n\010push"
  "pull\030\006 \001(\0132\t.PushPullH\000\022%\n\014combroadcast\030"
  "\007 \001(\0132\r.ComBroadcastH\000\022\025\n\004user\030\010 \001(\0132\005.U"
  "serH\000\022\033\n\007errresp\030\t \001(\0132\010.ErrRespH\000\"\215\001\n\013M"
  "essageType\022\013\n\007pingMsg\020\000\022\023\n\017indirectPingM"
  "sg\020\001\022\016\n\nackRespMsg\020\002\022\017\n\013nackRespMsg\020\003\022\017\n"
  "\013pushPullMsg\020\004\022\021\n\rcompoundBroad\020\005\022\013\n\007use"
  "rMsg\020\006\022\n\n\006errMsg\020\007B\006\n\004Body\"_\n\004Ping\022\r\n\005Se"
  "qNo\030\001 \001(\r\022\014\n\004Node\030\002 \001(\t\022\022\n\nSourceAddr\030\003 "
  "\001(\t\022\022\n\nSourcePort\030\004 \001(\r\022\022\n\nSourceNode\030\005 "
  "\001(\t\"\235\001\n\014IndirectPing\022\r\n\005SeqNo\030\001 \001(\r\022\014\n\004N"
  "ode\030\002 \001(\t\022\022\n\nTargetAddr\030\003 \001(\t\022\022\n\nTargetP"
  "ort\030\004 \001(\r\022\014\n\004Nack\030\005 \001(\010\022\022\n\nSourceAddr\030\006 "
  "\001(\t\022\022\n\nSourcePort\030\007 \001(\r\022\022\n\nSourceNode\030\010 "
  "\001(\t\"\030\n\007AckResp\022\r\n\005SeqNo\030\001 \001(\r\"\031\n\010NackRes"
  "p\022\r\n\005SeqNo\030\001 \001(\r\"\030\n\007ErrResp\022\r\n\005Error\030\001 \001"
  "(\t\":\n\007Suspect\022\023\n\013Incarnation\030\001 \001(\r\022\014\n\004No"
  "de\030\002 \001(\t\022\014\n\004From\030\003 \001(\t\"F\n\005Alive\022\023\n\013Incar"
  "nation\030\001 \001(\r\022\014\n\004Node\030\002 \001(\t\022\014\n\004Addr\030\003 \001(\t"
  "\022\014\n\004Port\030\004 \001(\r\"7\n\004Dead\022\023\n\013Incarnation\030\001 "
  "\001(\r\022\014\n\004Node\030\002 \001(\t\022\014\n\004From\030\003 \001(\t\"8\n\010PushP"
  "ull\022\014\n\004Join\030\001 \001(\010\022\036\n\006States\030\002 \003(\0132\016.Push"
  "NodeState\"\314\001\n\rPushNodeState\022\014\n\004Name\030\001 \001("
  "\t\022\014\n\004Addr\030\002 \001(\t\022\014\n\004Port\030\003 \001(\r\022\023\n\013Incarna"
  "tion\030\004 \001(\r\022+\n\005State\030\005 \001(\0162\034.PushNodeStat"
  "e.NodeStateType\"O\n\rNodeStateType\022\016\n\nStat"
  "eAlive\020\000\022\020\n\014StateSuspect\020\001\022\r\n\tStateDead\020"
  "\002\022\r\n\tStateLeft\020\003\"\023\n\004User\022\013\n\003Msg\030\001 \001(\t\"&\n"
  "\014ComBroadcast\022\026\n\002Bs\030\001 \003(\0132\n.Broadcast\"\307\001"
  "\n\tBroadcast\022&\n\004Type\030\001 \001(\0162\030.Broadcast.Br"
  "oadcastType\022\027\n\005alive\030\002 \001(\0132\006.AliveH\000\022\025\n\004"
  "dead\030\003 \001(\0132\005.DeadH\000\022\033\n\007suspect\030\004 \001(\0132\010.S"
  "uspectH\000\":\n\rBroadcastType\022\014\n\010aliveMsg\020\000\022"
  "\013\n\007deadMsg\020\001\022\016\n\nsuspectMsg\020\002B\t\n\007Contentb"
  "\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_msgtype_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_msgtype_2eproto = {
  false, false, 1567, descriptor_table_protodef_msgtype_2eproto, "msgtype.proto", 
  &descriptor_table_msgtype_2eproto_once, nullptr, 0, 15,
  schemas, file_default_instances, TableStruct_msgtype_2eproto::offsets,
  file_level_metadata_msgtype_2eproto, file_level_enum_descriptors_msgtype_2eproto, file_level_service_descriptors_msgtype_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_msgtype_2eproto_getter() {
  return &descriptor_table_msgtype_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_msgtype_2eproto(&descriptor_table_msgtype_2eproto);
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* MessageData_MessageType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msgtype_2eproto);
  return file_level_enum_descriptors_msgtype_2eproto[0];
}
bool MessageData_MessageType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr MessageData_MessageType MessageData::pingMsg;
constexpr MessageData_MessageType MessageData::indirectPingMsg;
constexpr MessageData_MessageType MessageData::ackRespMsg;
constexpr MessageData_MessageType MessageData::nackRespMsg;
constexpr MessageData_MessageType MessageData::pushPullMsg;
constexpr MessageData_MessageType MessageData::compoundBroad;
constexpr MessageData_MessageType MessageData::userMsg;
constexpr MessageData_MessageType MessageData::errMsg;
constexpr MessageData_MessageType MessageData::MessageType_MIN;
constexpr MessageData_MessageType MessageData::MessageType_MAX;
constexpr int MessageData::MessageType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* PushNodeState_NodeStateType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msgtype_2eproto);
  return file_level_enum_descriptors_msgtype_2eproto[1];
}
bool PushNodeState_NodeStateType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr PushNodeState_NodeStateType PushNodeState::StateAlive;
constexpr PushNodeState_NodeStateType PushNodeState::StateSuspect;
constexpr PushNodeState_NodeStateType PushNodeState::StateDead;
constexpr PushNodeState_NodeStateType PushNodeState::StateLeft;
constexpr PushNodeState_NodeStateType PushNodeState::NodeStateType_MIN;
constexpr PushNodeState_NodeStateType PushNodeState::NodeStateType_MAX;
constexpr int PushNodeState::NodeStateType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::PROTOBUF_NAMESPACE_ID::EnumDescriptor* Broadcast_BroadcastType_descriptor() {
  ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&descriptor_table_msgtype_2eproto);
  return file_level_enum_descriptors_msgtype_2eproto[2];
}
bool Broadcast_BroadcastType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
constexpr Broadcast_BroadcastType Broadcast::aliveMsg;
constexpr Broadcast_BroadcastType Broadcast::deadMsg;
constexpr Broadcast_BroadcastType Broadcast::suspectMsg;
constexpr Broadcast_BroadcastType Broadcast::BroadcastType_MIN;
constexpr Broadcast_BroadcastType Broadcast::BroadcastType_MAX;
constexpr int Broadcast::BroadcastType_ARRAYSIZE;
#endif  // (__cplusplus < 201703) && (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

// ===================================================================

class Compound::_Internal {
 public:
};

Compound::Compound(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  mds_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Compound)
}
Compound::Compound(const Compound& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      mds_(from.mds_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:Compound)
}

inline void Compound::SharedCtor() {
}

Compound::~Compound() {
  // @@protoc_insertion_point(destructor:Compound)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Compound::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void Compound::ArenaDtor(void* object) {
  Compound* _this = reinterpret_cast< Compound* >(object);
  (void)_this;
}
void Compound::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Compound::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Compound::Clear() {
// @@protoc_insertion_point(message_clear_start:Compound)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  mds_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Compound::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .MessageData Mds = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_mds(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Compound::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Compound)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .MessageData Mds = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_mds_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_mds(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Compound)
  return target;
}

size_t Compound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Compound)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .MessageData Mds = 1;
  total_size += 1UL * this->_internal_mds_size();
  for (const auto& msg : this->mds_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Compound::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Compound::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Compound::GetClassData() const { return &_class_data_; }

void Compound::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Compound *>(to)->MergeFrom(
      static_cast<const Compound &>(from));
}


void Compound::MergeFrom(const Compound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Compound)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  mds_.MergeFrom(from.mds_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Compound::CopyFrom(const Compound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Compound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compound::IsInitialized() const {
  return true;
}

void Compound::InternalSwap(Compound* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  mds_.InternalSwap(&other->mds_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Compound::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[0]);
}

// ===================================================================

class MessageData::_Internal {
 public:
  static const ::Ping& ping(const MessageData* msg);
  static const ::IndirectPing& indirectping(const MessageData* msg);
  static const ::AckResp& ackresp(const MessageData* msg);
  static const ::NackResp& nackresp(const MessageData* msg);
  static const ::PushPull& pushpull(const MessageData* msg);
  static const ::ComBroadcast& combroadcast(const MessageData* msg);
  static const ::User& user(const MessageData* msg);
  static const ::ErrResp& errresp(const MessageData* msg);
};

const ::Ping&
MessageData::_Internal::ping(const MessageData* msg) {
  return *msg->Body_.ping_;
}
const ::IndirectPing&
MessageData::_Internal::indirectping(const MessageData* msg) {
  return *msg->Body_.indirectping_;
}
const ::AckResp&
MessageData::_Internal::ackresp(const MessageData* msg) {
  return *msg->Body_.ackresp_;
}
const ::NackResp&
MessageData::_Internal::nackresp(const MessageData* msg) {
  return *msg->Body_.nackresp_;
}
const ::PushPull&
MessageData::_Internal::pushpull(const MessageData* msg) {
  return *msg->Body_.pushpull_;
}
const ::ComBroadcast&
MessageData::_Internal::combroadcast(const MessageData* msg) {
  return *msg->Body_.combroadcast_;
}
const ::User&
MessageData::_Internal::user(const MessageData* msg) {
  return *msg->Body_.user_;
}
const ::ErrResp&
MessageData::_Internal::errresp(const MessageData* msg) {
  return *msg->Body_.errresp_;
}
void MessageData::set_allocated_ping(::Ping* ping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Body();
  if (ping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Ping>::GetOwningArena(ping);
    if (message_arena != submessage_arena) {
      ping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ping, submessage_arena);
    }
    set_has_ping();
    Body_.ping_ = ping;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageData.ping)
}
void MessageData::set_allocated_indirectping(::IndirectPing* indirectping) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Body();
  if (indirectping) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::IndirectPing>::GetOwningArena(indirectping);
    if (message_arena != submessage_arena) {
      indirectping = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, indirectping, submessage_arena);
    }
    set_has_indirectping();
    Body_.indirectping_ = indirectping;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageData.indirectping)
}
void MessageData::set_allocated_ackresp(::AckResp* ackresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Body();
  if (ackresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::AckResp>::GetOwningArena(ackresp);
    if (message_arena != submessage_arena) {
      ackresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, ackresp, submessage_arena);
    }
    set_has_ackresp();
    Body_.ackresp_ = ackresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageData.ackresp)
}
void MessageData::set_allocated_nackresp(::NackResp* nackresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Body();
  if (nackresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::NackResp>::GetOwningArena(nackresp);
    if (message_arena != submessage_arena) {
      nackresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, nackresp, submessage_arena);
    }
    set_has_nackresp();
    Body_.nackresp_ = nackresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageData.nackresp)
}
void MessageData::set_allocated_pushpull(::PushPull* pushpull) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Body();
  if (pushpull) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::PushPull>::GetOwningArena(pushpull);
    if (message_arena != submessage_arena) {
      pushpull = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, pushpull, submessage_arena);
    }
    set_has_pushpull();
    Body_.pushpull_ = pushpull;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageData.pushpull)
}
void MessageData::set_allocated_combroadcast(::ComBroadcast* combroadcast) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Body();
  if (combroadcast) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ComBroadcast>::GetOwningArena(combroadcast);
    if (message_arena != submessage_arena) {
      combroadcast = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, combroadcast, submessage_arena);
    }
    set_has_combroadcast();
    Body_.combroadcast_ = combroadcast;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageData.combroadcast)
}
void MessageData::set_allocated_user(::User* user) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Body();
  if (user) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::User>::GetOwningArena(user);
    if (message_arena != submessage_arena) {
      user = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, user, submessage_arena);
    }
    set_has_user();
    Body_.user_ = user;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageData.user)
}
void MessageData::set_allocated_errresp(::ErrResp* errresp) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Body();
  if (errresp) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::ErrResp>::GetOwningArena(errresp);
    if (message_arena != submessage_arena) {
      errresp = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, errresp, submessage_arena);
    }
    set_has_errresp();
    Body_.errresp_ = errresp;
  }
  // @@protoc_insertion_point(field_set_allocated:MessageData.errresp)
}
MessageData::MessageData(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:MessageData)
}
MessageData::MessageData(const MessageData& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  head_ = from.head_;
  clear_has_Body();
  switch (from.Body_case()) {
    case kPing: {
      _internal_mutable_ping()->::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kIndirectping: {
      _internal_mutable_indirectping()->::IndirectPing::MergeFrom(from._internal_indirectping());
      break;
    }
    case kAckresp: {
      _internal_mutable_ackresp()->::AckResp::MergeFrom(from._internal_ackresp());
      break;
    }
    case kNackresp: {
      _internal_mutable_nackresp()->::NackResp::MergeFrom(from._internal_nackresp());
      break;
    }
    case kPushpull: {
      _internal_mutable_pushpull()->::PushPull::MergeFrom(from._internal_pushpull());
      break;
    }
    case kCombroadcast: {
      _internal_mutable_combroadcast()->::ComBroadcast::MergeFrom(from._internal_combroadcast());
      break;
    }
    case kUser: {
      _internal_mutable_user()->::User::MergeFrom(from._internal_user());
      break;
    }
    case kErrresp: {
      _internal_mutable_errresp()->::ErrResp::MergeFrom(from._internal_errresp());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:MessageData)
}

inline void MessageData::SharedCtor() {
head_ = 0;
clear_has_Body();
}

MessageData::~MessageData() {
  // @@protoc_insertion_point(destructor:MessageData)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MessageData::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Body()) {
    clear_Body();
  }
}

void MessageData::ArenaDtor(void* object) {
  MessageData* _this = reinterpret_cast< MessageData* >(object);
  (void)_this;
}
void MessageData::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MessageData::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MessageData::clear_Body() {
// @@protoc_insertion_point(one_of_clear_start:MessageData)
  switch (Body_case()) {
    case kPing: {
      if (GetArenaForAllocation() == nullptr) {
        delete Body_.ping_;
      }
      break;
    }
    case kIndirectping: {
      if (GetArenaForAllocation() == nullptr) {
        delete Body_.indirectping_;
      }
      break;
    }
    case kAckresp: {
      if (GetArenaForAllocation() == nullptr) {
        delete Body_.ackresp_;
      }
      break;
    }
    case kNackresp: {
      if (GetArenaForAllocation() == nullptr) {
        delete Body_.nackresp_;
      }
      break;
    }
    case kPushpull: {
      if (GetArenaForAllocation() == nullptr) {
        delete Body_.pushpull_;
      }
      break;
    }
    case kCombroadcast: {
      if (GetArenaForAllocation() == nullptr) {
        delete Body_.combroadcast_;
      }
      break;
    }
    case kUser: {
      if (GetArenaForAllocation() == nullptr) {
        delete Body_.user_;
      }
      break;
    }
    case kErrresp: {
      if (GetArenaForAllocation() == nullptr) {
        delete Body_.errresp_;
      }
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = BODY_NOT_SET;
}


void MessageData::Clear() {
// @@protoc_insertion_point(message_clear_start:MessageData)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  head_ = 0;
  clear_Body();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MessageData::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .MessageData.MessageType Head = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_head(static_cast<::MessageData_MessageType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Ping ping = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_ping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .IndirectPing indirectping = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_indirectping(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .AckResp ackresp = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_ackresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .NackResp nackresp = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          ptr = ctx->ParseMessage(_internal_mutable_nackresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PushPull pushpull = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          ptr = ctx->ParseMessage(_internal_mutable_pushpull(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ComBroadcast combroadcast = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 58)) {
          ptr = ctx->ParseMessage(_internal_mutable_combroadcast(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .User user = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          ptr = ctx->ParseMessage(_internal_mutable_user(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .ErrResp errresp = 9;
      case 9:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 74)) {
          ptr = ctx->ParseMessage(_internal_mutable_errresp(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MessageData::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:MessageData)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .MessageData.MessageType Head = 1;
  if (this->_internal_head() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_head(), target);
  }

  // .Ping ping = 2;
  if (_internal_has_ping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::ping(this), target, stream);
  }

  // .IndirectPing indirectping = 3;
  if (_internal_has_indirectping()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::indirectping(this), target, stream);
  }

  // .AckResp ackresp = 4;
  if (_internal_has_ackresp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::ackresp(this), target, stream);
  }

  // .NackResp nackresp = 5;
  if (_internal_has_nackresp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        5, _Internal::nackresp(this), target, stream);
  }

  // .PushPull pushpull = 6;
  if (_internal_has_pushpull()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        6, _Internal::pushpull(this), target, stream);
  }

  // .ComBroadcast combroadcast = 7;
  if (_internal_has_combroadcast()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        7, _Internal::combroadcast(this), target, stream);
  }

  // .User user = 8;
  if (_internal_has_user()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        8, _Internal::user(this), target, stream);
  }

  // .ErrResp errresp = 9;
  if (_internal_has_errresp()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        9, _Internal::errresp(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:MessageData)
  return target;
}

size_t MessageData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:MessageData)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .MessageData.MessageType Head = 1;
  if (this->_internal_head() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_head());
  }

  switch (Body_case()) {
    // .Ping ping = 2;
    case kPing: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Body_.ping_);
      break;
    }
    // .IndirectPing indirectping = 3;
    case kIndirectping: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Body_.indirectping_);
      break;
    }
    // .AckResp ackresp = 4;
    case kAckresp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Body_.ackresp_);
      break;
    }
    // .NackResp nackresp = 5;
    case kNackresp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Body_.nackresp_);
      break;
    }
    // .PushPull pushpull = 6;
    case kPushpull: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Body_.pushpull_);
      break;
    }
    // .ComBroadcast combroadcast = 7;
    case kCombroadcast: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Body_.combroadcast_);
      break;
    }
    // .User user = 8;
    case kUser: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Body_.user_);
      break;
    }
    // .ErrResp errresp = 9;
    case kErrresp: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Body_.errresp_);
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MessageData::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MessageData::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MessageData::GetClassData() const { return &_class_data_; }

void MessageData::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MessageData *>(to)->MergeFrom(
      static_cast<const MessageData &>(from));
}


void MessageData::MergeFrom(const MessageData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:MessageData)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_head() != 0) {
    _internal_set_head(from._internal_head());
  }
  switch (from.Body_case()) {
    case kPing: {
      _internal_mutable_ping()->::Ping::MergeFrom(from._internal_ping());
      break;
    }
    case kIndirectping: {
      _internal_mutable_indirectping()->::IndirectPing::MergeFrom(from._internal_indirectping());
      break;
    }
    case kAckresp: {
      _internal_mutable_ackresp()->::AckResp::MergeFrom(from._internal_ackresp());
      break;
    }
    case kNackresp: {
      _internal_mutable_nackresp()->::NackResp::MergeFrom(from._internal_nackresp());
      break;
    }
    case kPushpull: {
      _internal_mutable_pushpull()->::PushPull::MergeFrom(from._internal_pushpull());
      break;
    }
    case kCombroadcast: {
      _internal_mutable_combroadcast()->::ComBroadcast::MergeFrom(from._internal_combroadcast());
      break;
    }
    case kUser: {
      _internal_mutable_user()->::User::MergeFrom(from._internal_user());
      break;
    }
    case kErrresp: {
      _internal_mutable_errresp()->::ErrResp::MergeFrom(from._internal_errresp());
      break;
    }
    case BODY_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MessageData::CopyFrom(const MessageData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:MessageData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MessageData::IsInitialized() const {
  return true;
}

void MessageData::InternalSwap(MessageData* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(head_, other->head_);
  swap(Body_, other->Body_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata MessageData::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[1]);
}

// ===================================================================

class Ping::_Internal {
 public:
};

Ping::Ping(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Ping)
}
Ping::Ping(const Ping& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node(), 
      GetArenaForAllocation());
  }
  sourceaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sourceaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceaddr().empty()) {
    sourceaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceaddr(), 
      GetArenaForAllocation());
  }
  sourcenode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sourcenode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourcenode().empty()) {
    sourcenode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourcenode(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seqno_, &from.seqno_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceport_) -
    reinterpret_cast<char*>(&seqno_)) + sizeof(sourceport_));
  // @@protoc_insertion_point(copy_constructor:Ping)
}

inline void Ping::SharedCtor() {
node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sourceaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sourceaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sourcenode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sourcenode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seqno_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sourceport_) -
    reinterpret_cast<char*>(&seqno_)) + sizeof(sourceport_));
}

Ping::~Ping() {
  // @@protoc_insertion_point(destructor:Ping)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Ping::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcenode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Ping::ArenaDtor(void* object) {
  Ping* _this = reinterpret_cast< Ping* >(object);
  (void)_this;
}
void Ping::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Ping::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Ping::Clear() {
// @@protoc_insertion_point(message_clear_start:Ping)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty();
  sourceaddr_.ClearToEmpty();
  sourcenode_.ClearToEmpty();
  ::memset(&seqno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceport_) -
      reinterpret_cast<char*>(&seqno_)) + sizeof(sourceport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Ping::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SeqNo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Ping.Node"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SourceAddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_sourceaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Ping.SourceAddr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SourcePort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          sourceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SourceNode = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 42)) {
          auto str = _internal_mutable_sourcenode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Ping.SourceNode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Ping::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Ping)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SeqNo = 1;
  if (this->_internal_seqno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seqno(), target);
  }

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Ping.Node");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node(), target);
  }

  // string SourceAddr = 3;
  if (!this->_internal_sourceaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceaddr().data(), static_cast<int>(this->_internal_sourceaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Ping.SourceAddr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_sourceaddr(), target);
  }

  // uint32 SourcePort = 4;
  if (this->_internal_sourceport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_sourceport(), target);
  }

  // string SourceNode = 5;
  if (!this->_internal_sourcenode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcenode().data(), static_cast<int>(this->_internal_sourcenode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Ping.SourceNode");
    target = stream->WriteStringMaybeAliased(
        5, this->_internal_sourcenode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Ping)
  return target;
}

size_t Ping::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Ping)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // string SourceAddr = 3;
  if (!this->_internal_sourceaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceaddr());
  }

  // string SourceNode = 5;
  if (!this->_internal_sourcenode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcenode());
  }

  // uint32 SeqNo = 1;
  if (this->_internal_seqno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seqno());
  }

  // uint32 SourcePort = 4;
  if (this->_internal_sourceport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sourceport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Ping::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Ping::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Ping::GetClassData() const { return &_class_data_; }

void Ping::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Ping *>(to)->MergeFrom(
      static_cast<const Ping &>(from));
}


void Ping::MergeFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Ping)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _internal_set_node(from._internal_node());
  }
  if (!from._internal_sourceaddr().empty()) {
    _internal_set_sourceaddr(from._internal_sourceaddr());
  }
  if (!from._internal_sourcenode().empty()) {
    _internal_set_sourcenode(from._internal_sourcenode());
  }
  if (from._internal_seqno() != 0) {
    _internal_set_seqno(from._internal_seqno());
  }
  if (from._internal_sourceport() != 0) {
    _internal_set_sourceport(from._internal_sourceport());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Ping::CopyFrom(const Ping& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Ping)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ping::IsInitialized() const {
  return true;
}

void Ping::InternalSwap(Ping* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_, lhs_arena,
      &other->node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sourceaddr_, lhs_arena,
      &other->sourceaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sourcenode_, lhs_arena,
      &other->sourcenode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Ping, sourceport_)
      + sizeof(Ping::sourceport_)
      - PROTOBUF_FIELD_OFFSET(Ping, seqno_)>(
          reinterpret_cast<char*>(&seqno_),
          reinterpret_cast<char*>(&other->seqno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Ping::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[2]);
}

// ===================================================================

class IndirectPing::_Internal {
 public:
};

IndirectPing::IndirectPing(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:IndirectPing)
}
IndirectPing::IndirectPing(const IndirectPing& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node(), 
      GetArenaForAllocation());
  }
  targetaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    targetaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_targetaddr().empty()) {
    targetaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_targetaddr(), 
      GetArenaForAllocation());
  }
  sourceaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sourceaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourceaddr().empty()) {
    sourceaddr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourceaddr(), 
      GetArenaForAllocation());
  }
  sourcenode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    sourcenode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_sourcenode().empty()) {
    sourcenode_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_sourcenode(), 
      GetArenaForAllocation());
  }
  ::memcpy(&seqno_, &from.seqno_,
    static_cast<size_t>(reinterpret_cast<char*>(&sourceport_) -
    reinterpret_cast<char*>(&seqno_)) + sizeof(sourceport_));
  // @@protoc_insertion_point(copy_constructor:IndirectPing)
}

inline void IndirectPing::SharedCtor() {
node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
targetaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  targetaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sourceaddr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sourceaddr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
sourcenode_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  sourcenode_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&seqno_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&sourceport_) -
    reinterpret_cast<char*>(&seqno_)) + sizeof(sourceport_));
}

IndirectPing::~IndirectPing() {
  // @@protoc_insertion_point(destructor:IndirectPing)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void IndirectPing::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  targetaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourceaddr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  sourcenode_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void IndirectPing::ArenaDtor(void* object) {
  IndirectPing* _this = reinterpret_cast< IndirectPing* >(object);
  (void)_this;
}
void IndirectPing::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void IndirectPing::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void IndirectPing::Clear() {
// @@protoc_insertion_point(message_clear_start:IndirectPing)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty();
  targetaddr_.ClearToEmpty();
  sourceaddr_.ClearToEmpty();
  sourcenode_.ClearToEmpty();
  ::memset(&seqno_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&sourceport_) -
      reinterpret_cast<char*>(&seqno_)) + sizeof(sourceport_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* IndirectPing::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SeqNo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IndirectPing.Node"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string TargetAddr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_targetaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IndirectPing.TargetAddr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 TargetPort = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          targetport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // bool Nack = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          nack_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SourceAddr = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 50)) {
          auto str = _internal_mutable_sourceaddr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IndirectPing.SourceAddr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 SourcePort = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 56)) {
          sourceport_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string SourceNode = 8;
      case 8:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 66)) {
          auto str = _internal_mutable_sourcenode();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "IndirectPing.SourceNode"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* IndirectPing::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:IndirectPing)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SeqNo = 1;
  if (this->_internal_seqno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seqno(), target);
  }

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndirectPing.Node");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node(), target);
  }

  // string TargetAddr = 3;
  if (!this->_internal_targetaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_targetaddr().data(), static_cast<int>(this->_internal_targetaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndirectPing.TargetAddr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_targetaddr(), target);
  }

  // uint32 TargetPort = 4;
  if (this->_internal_targetport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_targetport(), target);
  }

  // bool Nack = 5;
  if (this->_internal_nack() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(5, this->_internal_nack(), target);
  }

  // string SourceAddr = 6;
  if (!this->_internal_sourceaddr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourceaddr().data(), static_cast<int>(this->_internal_sourceaddr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndirectPing.SourceAddr");
    target = stream->WriteStringMaybeAliased(
        6, this->_internal_sourceaddr(), target);
  }

  // uint32 SourcePort = 7;
  if (this->_internal_sourceport() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(7, this->_internal_sourceport(), target);
  }

  // string SourceNode = 8;
  if (!this->_internal_sourcenode().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_sourcenode().data(), static_cast<int>(this->_internal_sourcenode().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "IndirectPing.SourceNode");
    target = stream->WriteStringMaybeAliased(
        8, this->_internal_sourcenode(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:IndirectPing)
  return target;
}

size_t IndirectPing::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:IndirectPing)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // string TargetAddr = 3;
  if (!this->_internal_targetaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_targetaddr());
  }

  // string SourceAddr = 6;
  if (!this->_internal_sourceaddr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourceaddr());
  }

  // string SourceNode = 8;
  if (!this->_internal_sourcenode().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_sourcenode());
  }

  // uint32 SeqNo = 1;
  if (this->_internal_seqno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seqno());
  }

  // uint32 TargetPort = 4;
  if (this->_internal_targetport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_targetport());
  }

  // bool Nack = 5;
  if (this->_internal_nack() != 0) {
    total_size += 1 + 1;
  }

  // uint32 SourcePort = 7;
  if (this->_internal_sourceport() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_sourceport());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData IndirectPing::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    IndirectPing::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*IndirectPing::GetClassData() const { return &_class_data_; }

void IndirectPing::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<IndirectPing *>(to)->MergeFrom(
      static_cast<const IndirectPing &>(from));
}


void IndirectPing::MergeFrom(const IndirectPing& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:IndirectPing)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _internal_set_node(from._internal_node());
  }
  if (!from._internal_targetaddr().empty()) {
    _internal_set_targetaddr(from._internal_targetaddr());
  }
  if (!from._internal_sourceaddr().empty()) {
    _internal_set_sourceaddr(from._internal_sourceaddr());
  }
  if (!from._internal_sourcenode().empty()) {
    _internal_set_sourcenode(from._internal_sourcenode());
  }
  if (from._internal_seqno() != 0) {
    _internal_set_seqno(from._internal_seqno());
  }
  if (from._internal_targetport() != 0) {
    _internal_set_targetport(from._internal_targetport());
  }
  if (from._internal_nack() != 0) {
    _internal_set_nack(from._internal_nack());
  }
  if (from._internal_sourceport() != 0) {
    _internal_set_sourceport(from._internal_sourceport());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void IndirectPing::CopyFrom(const IndirectPing& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:IndirectPing)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IndirectPing::IsInitialized() const {
  return true;
}

void IndirectPing::InternalSwap(IndirectPing* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_, lhs_arena,
      &other->node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &targetaddr_, lhs_arena,
      &other->targetaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sourceaddr_, lhs_arena,
      &other->sourceaddr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &sourcenode_, lhs_arena,
      &other->sourcenode_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndirectPing, sourceport_)
      + sizeof(IndirectPing::sourceport_)
      - PROTOBUF_FIELD_OFFSET(IndirectPing, seqno_)>(
          reinterpret_cast<char*>(&seqno_),
          reinterpret_cast<char*>(&other->seqno_));
}

::PROTOBUF_NAMESPACE_ID::Metadata IndirectPing::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[3]);
}

// ===================================================================

class AckResp::_Internal {
 public:
};

AckResp::AckResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:AckResp)
}
AckResp::AckResp(const AckResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seqno_ = from.seqno_;
  // @@protoc_insertion_point(copy_constructor:AckResp)
}

inline void AckResp::SharedCtor() {
seqno_ = 0u;
}

AckResp::~AckResp() {
  // @@protoc_insertion_point(destructor:AckResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AckResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AckResp::ArenaDtor(void* object) {
  AckResp* _this = reinterpret_cast< AckResp* >(object);
  (void)_this;
}
void AckResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AckResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AckResp::Clear() {
// @@protoc_insertion_point(message_clear_start:AckResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seqno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AckResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SeqNo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AckResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:AckResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SeqNo = 1;
  if (this->_internal_seqno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seqno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:AckResp)
  return target;
}

size_t AckResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:AckResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 SeqNo = 1;
  if (this->_internal_seqno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seqno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AckResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AckResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AckResp::GetClassData() const { return &_class_data_; }

void AckResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AckResp *>(to)->MergeFrom(
      static_cast<const AckResp &>(from));
}


void AckResp::MergeFrom(const AckResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:AckResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seqno() != 0) {
    _internal_set_seqno(from._internal_seqno());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AckResp::CopyFrom(const AckResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:AckResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckResp::IsInitialized() const {
  return true;
}

void AckResp::InternalSwap(AckResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seqno_, other->seqno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AckResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[4]);
}

// ===================================================================

class NackResp::_Internal {
 public:
};

NackResp::NackResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:NackResp)
}
NackResp::NackResp(const NackResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  seqno_ = from.seqno_;
  // @@protoc_insertion_point(copy_constructor:NackResp)
}

inline void NackResp::SharedCtor() {
seqno_ = 0u;
}

NackResp::~NackResp() {
  // @@protoc_insertion_point(destructor:NackResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void NackResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void NackResp::ArenaDtor(void* object) {
  NackResp* _this = reinterpret_cast< NackResp* >(object);
  (void)_this;
}
void NackResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void NackResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void NackResp::Clear() {
// @@protoc_insertion_point(message_clear_start:NackResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  seqno_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* NackResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 SeqNo = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          seqno_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* NackResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:NackResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 SeqNo = 1;
  if (this->_internal_seqno() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_seqno(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:NackResp)
  return target;
}

size_t NackResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:NackResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // uint32 SeqNo = 1;
  if (this->_internal_seqno() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_seqno());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData NackResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    NackResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*NackResp::GetClassData() const { return &_class_data_; }

void NackResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<NackResp *>(to)->MergeFrom(
      static_cast<const NackResp &>(from));
}


void NackResp::MergeFrom(const NackResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:NackResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_seqno() != 0) {
    _internal_set_seqno(from._internal_seqno());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void NackResp::CopyFrom(const NackResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:NackResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NackResp::IsInitialized() const {
  return true;
}

void NackResp::InternalSwap(NackResp* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(seqno_, other->seqno_);
}

::PROTOBUF_NAMESPACE_ID::Metadata NackResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[5]);
}

// ===================================================================

class ErrResp::_Internal {
 public:
};

ErrResp::ErrResp(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ErrResp)
}
ErrResp::ErrResp(const ErrResp& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_error().empty()) {
    error_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_error(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:ErrResp)
}

inline void ErrResp::SharedCtor() {
error_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  error_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

ErrResp::~ErrResp() {
  // @@protoc_insertion_point(destructor:ErrResp)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ErrResp::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  error_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void ErrResp::ArenaDtor(void* object) {
  ErrResp* _this = reinterpret_cast< ErrResp* >(object);
  (void)_this;
}
void ErrResp::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ErrResp::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ErrResp::Clear() {
// @@protoc_insertion_point(message_clear_start:ErrResp)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ErrResp::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Error = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_error();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "ErrResp.Error"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ErrResp::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ErrResp)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Error = 1;
  if (!this->_internal_error().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_error().data(), static_cast<int>(this->_internal_error().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "ErrResp.Error");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_error(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ErrResp)
  return target;
}

size_t ErrResp::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ErrResp)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Error = 1;
  if (!this->_internal_error().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_error());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ErrResp::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ErrResp::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ErrResp::GetClassData() const { return &_class_data_; }

void ErrResp::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ErrResp *>(to)->MergeFrom(
      static_cast<const ErrResp &>(from));
}


void ErrResp::MergeFrom(const ErrResp& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ErrResp)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_error().empty()) {
    _internal_set_error(from._internal_error());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ErrResp::CopyFrom(const ErrResp& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ErrResp)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ErrResp::IsInitialized() const {
  return true;
}

void ErrResp::InternalSwap(ErrResp* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &error_, lhs_arena,
      &other->error_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata ErrResp::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[6]);
}

// ===================================================================

class Suspect::_Internal {
 public:
};

Suspect::Suspect(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Suspect)
}
Suspect::Suspect(const Suspect& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node(), 
      GetArenaForAllocation());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  incarnation_ = from.incarnation_;
  // @@protoc_insertion_point(copy_constructor:Suspect)
}

inline void Suspect::SharedCtor() {
node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
incarnation_ = 0u;
}

Suspect::~Suspect() {
  // @@protoc_insertion_point(destructor:Suspect)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Suspect::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Suspect::ArenaDtor(void* object) {
  Suspect* _this = reinterpret_cast< Suspect* >(object);
  (void)_this;
}
void Suspect::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Suspect::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Suspect::Clear() {
// @@protoc_insertion_point(message_clear_start:Suspect)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty();
  from_.ClearToEmpty();
  incarnation_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Suspect::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Incarnation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Suspect.Node"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string From = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Suspect.From"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Suspect::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Suspect)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Incarnation = 1;
  if (this->_internal_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_incarnation(), target);
  }

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Suspect.Node");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node(), target);
  }

  // string From = 3;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Suspect.From");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Suspect)
  return target;
}

size_t Suspect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Suspect)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // string From = 3;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // uint32 Incarnation = 1;
  if (this->_internal_incarnation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_incarnation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Suspect::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Suspect::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Suspect::GetClassData() const { return &_class_data_; }

void Suspect::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Suspect *>(to)->MergeFrom(
      static_cast<const Suspect &>(from));
}


void Suspect::MergeFrom(const Suspect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Suspect)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _internal_set_node(from._internal_node());
  }
  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_incarnation() != 0) {
    _internal_set_incarnation(from._internal_incarnation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Suspect::CopyFrom(const Suspect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Suspect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Suspect::IsInitialized() const {
  return true;
}

void Suspect::InternalSwap(Suspect* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_, lhs_arena,
      &other->node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  swap(incarnation_, other->incarnation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Suspect::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[7]);
}

// ===================================================================

class Alive::_Internal {
 public:
};

Alive::Alive(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Alive)
}
Alive::Alive(const Alive& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node(), 
      GetArenaForAllocation());
  }
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArenaForAllocation());
  }
  ::memcpy(&incarnation_, &from.incarnation_,
    static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&incarnation_)) + sizeof(port_));
  // @@protoc_insertion_point(copy_constructor:Alive)
}

inline void Alive::SharedCtor() {
node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&incarnation_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&incarnation_)) + sizeof(port_));
}

Alive::~Alive() {
  // @@protoc_insertion_point(destructor:Alive)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Alive::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Alive::ArenaDtor(void* object) {
  Alive* _this = reinterpret_cast< Alive* >(object);
  (void)_this;
}
void Alive::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Alive::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Alive::Clear() {
// @@protoc_insertion_point(message_clear_start:Alive)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty();
  addr_.ClearToEmpty();
  ::memset(&incarnation_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&port_) -
      reinterpret_cast<char*>(&incarnation_)) + sizeof(port_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Alive::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Incarnation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Alive.Node"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Addr = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Alive.Addr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Port = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Alive::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Alive)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Incarnation = 1;
  if (this->_internal_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_incarnation(), target);
  }

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Alive.Node");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node(), target);
  }

  // string Addr = 3;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Alive.Addr");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_addr(), target);
  }

  // uint32 Port = 4;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_port(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Alive)
  return target;
}

size_t Alive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Alive)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // string Addr = 3;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // uint32 Incarnation = 1;
  if (this->_internal_incarnation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_incarnation());
  }

  // uint32 Port = 4;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Alive::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Alive::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Alive::GetClassData() const { return &_class_data_; }

void Alive::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Alive *>(to)->MergeFrom(
      static_cast<const Alive &>(from));
}


void Alive::MergeFrom(const Alive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Alive)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _internal_set_node(from._internal_node());
  }
  if (!from._internal_addr().empty()) {
    _internal_set_addr(from._internal_addr());
  }
  if (from._internal_incarnation() != 0) {
    _internal_set_incarnation(from._internal_incarnation());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Alive::CopyFrom(const Alive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Alive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Alive::IsInitialized() const {
  return true;
}

void Alive::InternalSwap(Alive* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_, lhs_arena,
      &other->node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addr_, lhs_arena,
      &other->addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Alive, port_)
      + sizeof(Alive::port_)
      - PROTOBUF_FIELD_OFFSET(Alive, incarnation_)>(
          reinterpret_cast<char*>(&incarnation_),
          reinterpret_cast<char*>(&other->incarnation_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Alive::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[8]);
}

// ===================================================================

class Dead::_Internal {
 public:
};

Dead::Dead(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Dead)
}
Dead::Dead(const Dead& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_node().empty()) {
    node_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_node(), 
      GetArenaForAllocation());
  }
  from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_from().empty()) {
    from_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_from(), 
      GetArenaForAllocation());
  }
  incarnation_ = from.incarnation_;
  // @@protoc_insertion_point(copy_constructor:Dead)
}

inline void Dead::SharedCtor() {
node_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  node_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
from_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  from_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
incarnation_ = 0u;
}

Dead::~Dead() {
  // @@protoc_insertion_point(destructor:Dead)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Dead::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  node_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  from_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void Dead::ArenaDtor(void* object) {
  Dead* _this = reinterpret_cast< Dead* >(object);
  (void)_this;
}
void Dead::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Dead::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Dead::Clear() {
// @@protoc_insertion_point(message_clear_start:Dead)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  node_.ClearToEmpty();
  from_.ClearToEmpty();
  incarnation_ = 0u;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Dead::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // uint32 Incarnation = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Node = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_node();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Dead.Node"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string From = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          auto str = _internal_mutable_from();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "Dead.From"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Dead::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Dead)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 Incarnation = 1;
  if (this->_internal_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(1, this->_internal_incarnation(), target);
  }

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_node().data(), static_cast<int>(this->_internal_node().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Dead.Node");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_node(), target);
  }

  // string From = 3;
  if (!this->_internal_from().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_from().data(), static_cast<int>(this->_internal_from().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "Dead.From");
    target = stream->WriteStringMaybeAliased(
        3, this->_internal_from(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Dead)
  return target;
}

size_t Dead::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Dead)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Node = 2;
  if (!this->_internal_node().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_node());
  }

  // string From = 3;
  if (!this->_internal_from().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_from());
  }

  // uint32 Incarnation = 1;
  if (this->_internal_incarnation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_incarnation());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Dead::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Dead::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Dead::GetClassData() const { return &_class_data_; }

void Dead::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Dead *>(to)->MergeFrom(
      static_cast<const Dead &>(from));
}


void Dead::MergeFrom(const Dead& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Dead)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_node().empty()) {
    _internal_set_node(from._internal_node());
  }
  if (!from._internal_from().empty()) {
    _internal_set_from(from._internal_from());
  }
  if (from._internal_incarnation() != 0) {
    _internal_set_incarnation(from._internal_incarnation());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Dead::CopyFrom(const Dead& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Dead)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Dead::IsInitialized() const {
  return true;
}

void Dead::InternalSwap(Dead* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &node_, lhs_arena,
      &other->node_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &from_, lhs_arena,
      &other->from_, rhs_arena
  );
  swap(incarnation_, other->incarnation_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Dead::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[9]);
}

// ===================================================================

class PushPull::_Internal {
 public:
};

PushPull::PushPull(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  states_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PushPull)
}
PushPull::PushPull(const PushPull& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      states_(from.states_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  join_ = from.join_;
  // @@protoc_insertion_point(copy_constructor:PushPull)
}

inline void PushPull::SharedCtor() {
join_ = false;
}

PushPull::~PushPull() {
  // @@protoc_insertion_point(destructor:PushPull)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PushPull::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void PushPull::ArenaDtor(void* object) {
  PushPull* _this = reinterpret_cast< PushPull* >(object);
  (void)_this;
}
void PushPull::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushPull::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushPull::Clear() {
// @@protoc_insertion_point(message_clear_start:PushPull)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  states_.Clear();
  join_ = false;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushPull::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // bool Join = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          join_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // repeated .PushNodeState States = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_states(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushPull::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PushPull)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // bool Join = 1;
  if (this->_internal_join() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteBoolToArray(1, this->_internal_join(), target);
  }

  // repeated .PushNodeState States = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_states_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_states(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PushPull)
  return target;
}

size_t PushPull::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PushPull)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .PushNodeState States = 2;
  total_size += 1UL * this->_internal_states_size();
  for (const auto& msg : this->states_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // bool Join = 1;
  if (this->_internal_join() != 0) {
    total_size += 1 + 1;
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushPull::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushPull::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushPull::GetClassData() const { return &_class_data_; }

void PushPull::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PushPull *>(to)->MergeFrom(
      static_cast<const PushPull &>(from));
}


void PushPull::MergeFrom(const PushPull& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PushPull)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  states_.MergeFrom(from.states_);
  if (from._internal_join() != 0) {
    _internal_set_join(from._internal_join());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushPull::CopyFrom(const PushPull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PushPull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushPull::IsInitialized() const {
  return true;
}

void PushPull::InternalSwap(PushPull* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  states_.InternalSwap(&other->states_);
  swap(join_, other->join_);
}

::PROTOBUF_NAMESPACE_ID::Metadata PushPull::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[10]);
}

// ===================================================================

class PushNodeState::_Internal {
 public:
};

PushNodeState::PushNodeState(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:PushNodeState)
}
PushNodeState::PushNodeState(const PushNodeState& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_name().empty()) {
    name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_name(), 
      GetArenaForAllocation());
  }
  addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_addr().empty()) {
    addr_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_addr(), 
      GetArenaForAllocation());
  }
  ::memcpy(&port_, &from.port_,
    static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&port_)) + sizeof(state_));
  // @@protoc_insertion_point(copy_constructor:PushNodeState)
}

inline void PushNodeState::SharedCtor() {
name_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  name_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
addr_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  addr_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&port_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&state_) -
    reinterpret_cast<char*>(&port_)) + sizeof(state_));
}

PushNodeState::~PushNodeState() {
  // @@protoc_insertion_point(destructor:PushNodeState)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void PushNodeState::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  name_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  addr_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void PushNodeState::ArenaDtor(void* object) {
  PushNodeState* _this = reinterpret_cast< PushNodeState* >(object);
  (void)_this;
}
void PushNodeState::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void PushNodeState::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void PushNodeState::Clear() {
// @@protoc_insertion_point(message_clear_start:PushNodeState)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmpty();
  addr_.ClearToEmpty();
  ::memset(&port_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&state_) -
      reinterpret_cast<char*>(&port_)) + sizeof(state_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* PushNodeState::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Name = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_name();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PushNodeState.Name"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // string Addr = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          auto str = _internal_mutable_addr();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "PushNodeState.Addr"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Port = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 24)) {
          port_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // uint32 Incarnation = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 32)) {
          incarnation_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .PushNodeState.NodeStateType State = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 40)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_state(static_cast<::PushNodeState_NodeStateType>(val));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* PushNodeState::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:PushNodeState)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_name().data(), static_cast<int>(this->_internal_name().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PushNodeState.Name");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_name(), target);
  }

  // string Addr = 2;
  if (!this->_internal_addr().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_addr().data(), static_cast<int>(this->_internal_addr().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "PushNodeState.Addr");
    target = stream->WriteStringMaybeAliased(
        2, this->_internal_addr(), target);
  }

  // uint32 Port = 3;
  if (this->_internal_port() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(3, this->_internal_port(), target);
  }

  // uint32 Incarnation = 4;
  if (this->_internal_incarnation() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteUInt32ToArray(4, this->_internal_incarnation(), target);
  }

  // .PushNodeState.NodeStateType State = 5;
  if (this->_internal_state() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      5, this->_internal_state(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:PushNodeState)
  return target;
}

size_t PushNodeState::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:PushNodeState)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Name = 1;
  if (!this->_internal_name().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_name());
  }

  // string Addr = 2;
  if (!this->_internal_addr().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_addr());
  }

  // uint32 Port = 3;
  if (this->_internal_port() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_port());
  }

  // uint32 Incarnation = 4;
  if (this->_internal_incarnation() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::UInt32SizePlusOne(this->_internal_incarnation());
  }

  // .PushNodeState.NodeStateType State = 5;
  if (this->_internal_state() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_state());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData PushNodeState::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    PushNodeState::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*PushNodeState::GetClassData() const { return &_class_data_; }

void PushNodeState::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<PushNodeState *>(to)->MergeFrom(
      static_cast<const PushNodeState &>(from));
}


void PushNodeState::MergeFrom(const PushNodeState& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:PushNodeState)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_name().empty()) {
    _internal_set_name(from._internal_name());
  }
  if (!from._internal_addr().empty()) {
    _internal_set_addr(from._internal_addr());
  }
  if (from._internal_port() != 0) {
    _internal_set_port(from._internal_port());
  }
  if (from._internal_incarnation() != 0) {
    _internal_set_incarnation(from._internal_incarnation());
  }
  if (from._internal_state() != 0) {
    _internal_set_state(from._internal_state());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void PushNodeState::CopyFrom(const PushNodeState& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:PushNodeState)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PushNodeState::IsInitialized() const {
  return true;
}

void PushNodeState::InternalSwap(PushNodeState* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &name_, lhs_arena,
      &other->name_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &addr_, lhs_arena,
      &other->addr_, rhs_arena
  );
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(PushNodeState, state_)
      + sizeof(PushNodeState::state_)
      - PROTOBUF_FIELD_OFFSET(PushNodeState, port_)>(
          reinterpret_cast<char*>(&port_),
          reinterpret_cast<char*>(&other->port_));
}

::PROTOBUF_NAMESPACE_ID::Metadata PushNodeState::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[11]);
}

// ===================================================================

class User::_Internal {
 public:
};

User::User(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:User)
}
User::User(const User& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
    msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
  #endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  if (!from._internal_msg().empty()) {
    msg_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, from._internal_msg(), 
      GetArenaForAllocation());
  }
  // @@protoc_insertion_point(copy_constructor:User)
}

inline void User::SharedCtor() {
msg_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
#ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
  msg_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), "", GetArenaForAllocation());
#endif // PROTOBUF_FORCE_COPY_DEFAULT_STRING
}

User::~User() {
  // @@protoc_insertion_point(destructor:User)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void User::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  msg_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
}

void User::ArenaDtor(void* object) {
  User* _this = reinterpret_cast< User* >(object);
  (void)_this;
}
void User::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void User::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:User)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  msg_.ClearToEmpty();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* User::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // string Msg = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          auto str = _internal_mutable_msg();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "User.Msg"));
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* User::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:User)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // string Msg = 1;
  if (!this->_internal_msg().empty()) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_msg().data(), static_cast<int>(this->_internal_msg().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "User.Msg");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_msg(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:User)
  return target;
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:User)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string Msg = 1;
  if (!this->_internal_msg().empty()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_msg());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData User::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    User::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*User::GetClassData() const { return &_class_data_; }

void User::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<User *>(to)->MergeFrom(
      static_cast<const User &>(from));
}


void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:User)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_msg().empty()) {
    _internal_set_msg(from._internal_msg());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::InternalSwap(User* other) {
  using std::swap;
  auto* lhs_arena = GetArenaForAllocation();
  auto* rhs_arena = other->GetArenaForAllocation();
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::InternalSwap(
      &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      &msg_, lhs_arena,
      &other->msg_, rhs_arena
  );
}

::PROTOBUF_NAMESPACE_ID::Metadata User::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[12]);
}

// ===================================================================

class ComBroadcast::_Internal {
 public:
};

ComBroadcast::ComBroadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned),
  bs_(arena) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:ComBroadcast)
}
ComBroadcast::ComBroadcast(const ComBroadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      bs_(from.bs_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:ComBroadcast)
}

inline void ComBroadcast::SharedCtor() {
}

ComBroadcast::~ComBroadcast() {
  // @@protoc_insertion_point(destructor:ComBroadcast)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ComBroadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ComBroadcast::ArenaDtor(void* object) {
  ComBroadcast* _this = reinterpret_cast< ComBroadcast* >(object);
  (void)_this;
}
void ComBroadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ComBroadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ComBroadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:ComBroadcast)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  bs_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ComBroadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // repeated .Broadcast Bs = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_bs(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ComBroadcast::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:ComBroadcast)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .Broadcast Bs = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_bs_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_bs(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ComBroadcast)
  return target;
}

size_t ComBroadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ComBroadcast)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .Broadcast Bs = 1;
  total_size += 1UL * this->_internal_bs_size();
  for (const auto& msg : this->bs_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ComBroadcast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ComBroadcast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ComBroadcast::GetClassData() const { return &_class_data_; }

void ComBroadcast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ComBroadcast *>(to)->MergeFrom(
      static_cast<const ComBroadcast &>(from));
}


void ComBroadcast::MergeFrom(const ComBroadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ComBroadcast)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  bs_.MergeFrom(from.bs_);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ComBroadcast::CopyFrom(const ComBroadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ComBroadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComBroadcast::IsInitialized() const {
  return true;
}

void ComBroadcast::InternalSwap(ComBroadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  bs_.InternalSwap(&other->bs_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ComBroadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[13]);
}

// ===================================================================

class Broadcast::_Internal {
 public:
  static const ::Alive& alive(const Broadcast* msg);
  static const ::Dead& dead(const Broadcast* msg);
  static const ::Suspect& suspect(const Broadcast* msg);
};

const ::Alive&
Broadcast::_Internal::alive(const Broadcast* msg) {
  return *msg->Content_.alive_;
}
const ::Dead&
Broadcast::_Internal::dead(const Broadcast* msg) {
  return *msg->Content_.dead_;
}
const ::Suspect&
Broadcast::_Internal::suspect(const Broadcast* msg) {
  return *msg->Content_.suspect_;
}
void Broadcast::set_allocated_alive(::Alive* alive) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Content();
  if (alive) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Alive>::GetOwningArena(alive);
    if (message_arena != submessage_arena) {
      alive = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, alive, submessage_arena);
    }
    set_has_alive();
    Content_.alive_ = alive;
  }
  // @@protoc_insertion_point(field_set_allocated:Broadcast.alive)
}
void Broadcast::set_allocated_dead(::Dead* dead) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Content();
  if (dead) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Dead>::GetOwningArena(dead);
    if (message_arena != submessage_arena) {
      dead = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, dead, submessage_arena);
    }
    set_has_dead();
    Content_.dead_ = dead;
  }
  // @@protoc_insertion_point(field_set_allocated:Broadcast.dead)
}
void Broadcast::set_allocated_suspect(::Suspect* suspect) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  clear_Content();
  if (suspect) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Suspect>::GetOwningArena(suspect);
    if (message_arena != submessage_arena) {
      suspect = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, suspect, submessage_arena);
    }
    set_has_suspect();
    Content_.suspect_ = suspect;
  }
  // @@protoc_insertion_point(field_set_allocated:Broadcast.suspect)
}
Broadcast::Broadcast(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:Broadcast)
}
Broadcast::Broadcast(const Broadcast& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  type_ = from.type_;
  clear_has_Content();
  switch (from.Content_case()) {
    case kAlive: {
      _internal_mutable_alive()->::Alive::MergeFrom(from._internal_alive());
      break;
    }
    case kDead: {
      _internal_mutable_dead()->::Dead::MergeFrom(from._internal_dead());
      break;
    }
    case kSuspect: {
      _internal_mutable_suspect()->::Suspect::MergeFrom(from._internal_suspect());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  // @@protoc_insertion_point(copy_constructor:Broadcast)
}

inline void Broadcast::SharedCtor() {
type_ = 0;
clear_has_Content();
}

Broadcast::~Broadcast() {
  // @@protoc_insertion_point(destructor:Broadcast)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void Broadcast::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
  if (has_Content()) {
    clear_Content();
  }
}

void Broadcast::ArenaDtor(void* object) {
  Broadcast* _this = reinterpret_cast< Broadcast* >(object);
  (void)_this;
}
void Broadcast::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Broadcast::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void Broadcast::clear_Content() {
// @@protoc_insertion_point(one_of_clear_start:Broadcast)
  switch (Content_case()) {
    case kAlive: {
      if (GetArenaForAllocation() == nullptr) {
        delete Content_.alive_;
      }
      break;
    }
    case kDead: {
      if (GetArenaForAllocation() == nullptr) {
        delete Content_.dead_;
      }
      break;
    }
    case kSuspect: {
      if (GetArenaForAllocation() == nullptr) {
        delete Content_.suspect_;
      }
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _oneof_case_[0] = CONTENT_NOT_SET;
}


void Broadcast::Clear() {
// @@protoc_insertion_point(message_clear_start:Broadcast)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  type_ = 0;
  clear_Content();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Broadcast::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // .Broadcast.BroadcastType Type = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          uint64_t val = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
          _internal_set_type(static_cast<::Broadcast_BroadcastType>(val));
        } else
          goto handle_unusual;
        continue;
      // .Alive alive = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_alive(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Dead dead = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 26)) {
          ptr = ctx->ParseMessage(_internal_mutable_dead(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // .Suspect suspect = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 34)) {
          ptr = ctx->ParseMessage(_internal_mutable_suspect(), ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* Broadcast::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:Broadcast)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // .Broadcast.BroadcastType Type = 1;
  if (this->_internal_type() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteEnumToArray(
      1, this->_internal_type(), target);
  }

  // .Alive alive = 2;
  if (_internal_has_alive()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::alive(this), target, stream);
  }

  // .Dead dead = 3;
  if (_internal_has_dead()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        3, _Internal::dead(this), target, stream);
  }

  // .Suspect suspect = 4;
  if (_internal_has_suspect()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        4, _Internal::suspect(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Broadcast)
  return target;
}

size_t Broadcast::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:Broadcast)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .Broadcast.BroadcastType Type = 1;
  if (this->_internal_type() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::EnumSize(this->_internal_type());
  }

  switch (Content_case()) {
    // .Alive alive = 2;
    case kAlive: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Content_.alive_);
      break;
    }
    // .Dead dead = 3;
    case kDead: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Content_.dead_);
      break;
    }
    // .Suspect suspect = 4;
    case kSuspect: {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
          *Content_.suspect_);
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData Broadcast::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    Broadcast::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*Broadcast::GetClassData() const { return &_class_data_; }

void Broadcast::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<Broadcast *>(to)->MergeFrom(
      static_cast<const Broadcast &>(from));
}


void Broadcast::MergeFrom(const Broadcast& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:Broadcast)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_type() != 0) {
    _internal_set_type(from._internal_type());
  }
  switch (from.Content_case()) {
    case kAlive: {
      _internal_mutable_alive()->::Alive::MergeFrom(from._internal_alive());
      break;
    }
    case kDead: {
      _internal_mutable_dead()->::Dead::MergeFrom(from._internal_dead());
      break;
    }
    case kSuspect: {
      _internal_mutable_suspect()->::Suspect::MergeFrom(from._internal_suspect());
      break;
    }
    case CONTENT_NOT_SET: {
      break;
    }
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void Broadcast::CopyFrom(const Broadcast& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:Broadcast)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Broadcast::IsInitialized() const {
  return true;
}

void Broadcast::InternalSwap(Broadcast* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(type_, other->type_);
  swap(Content_, other->Content_);
  swap(_oneof_case_[0], other->_oneof_case_[0]);
}

::PROTOBUF_NAMESPACE_ID::Metadata Broadcast::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_msgtype_2eproto_getter, &descriptor_table_msgtype_2eproto_once,
      file_level_metadata_msgtype_2eproto[14]);
}

// @@protoc_insertion_point(namespace_scope)
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::Compound* Arena::CreateMaybeMessage< ::Compound >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Compound >(arena);
}
template<> PROTOBUF_NOINLINE ::MessageData* Arena::CreateMaybeMessage< ::MessageData >(Arena* arena) {
  return Arena::CreateMessageInternal< ::MessageData >(arena);
}
template<> PROTOBUF_NOINLINE ::Ping* Arena::CreateMaybeMessage< ::Ping >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Ping >(arena);
}
template<> PROTOBUF_NOINLINE ::IndirectPing* Arena::CreateMaybeMessage< ::IndirectPing >(Arena* arena) {
  return Arena::CreateMessageInternal< ::IndirectPing >(arena);
}
template<> PROTOBUF_NOINLINE ::AckResp* Arena::CreateMaybeMessage< ::AckResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::AckResp >(arena);
}
template<> PROTOBUF_NOINLINE ::NackResp* Arena::CreateMaybeMessage< ::NackResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::NackResp >(arena);
}
template<> PROTOBUF_NOINLINE ::ErrResp* Arena::CreateMaybeMessage< ::ErrResp >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ErrResp >(arena);
}
template<> PROTOBUF_NOINLINE ::Suspect* Arena::CreateMaybeMessage< ::Suspect >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Suspect >(arena);
}
template<> PROTOBUF_NOINLINE ::Alive* Arena::CreateMaybeMessage< ::Alive >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Alive >(arena);
}
template<> PROTOBUF_NOINLINE ::Dead* Arena::CreateMaybeMessage< ::Dead >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Dead >(arena);
}
template<> PROTOBUF_NOINLINE ::PushPull* Arena::CreateMaybeMessage< ::PushPull >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PushPull >(arena);
}
template<> PROTOBUF_NOINLINE ::PushNodeState* Arena::CreateMaybeMessage< ::PushNodeState >(Arena* arena) {
  return Arena::CreateMessageInternal< ::PushNodeState >(arena);
}
template<> PROTOBUF_NOINLINE ::User* Arena::CreateMaybeMessage< ::User >(Arena* arena) {
  return Arena::CreateMessageInternal< ::User >(arena);
}
template<> PROTOBUF_NOINLINE ::ComBroadcast* Arena::CreateMaybeMessage< ::ComBroadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::ComBroadcast >(arena);
}
template<> PROTOBUF_NOINLINE ::Broadcast* Arena::CreateMaybeMessage< ::Broadcast >(Arena* arena) {
  return Arena::CreateMessageInternal< ::Broadcast >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
